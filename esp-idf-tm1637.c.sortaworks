#include <stdio.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include "esp-idf-tm1637.h"
#include <rom/ets_sys.h>

#include "esp_log.h"

const uint8_t digitToSegment[] = {
 // XGFEDCBA
  0b00111111,    // 0
  0b00000110,    // 1
  0b01011011,    // 2
  0b01001111,    // 3
  0b01100110,    // 4
  0b01101101,    // 5
  0b01111101,    // 6
  0b00000111,    // 7
  0b01111111,    // 8
  0b01101111,    // 9
  0b01110111,    // A
  0b01111100,    // b
  0b00111001,    // C
  0b01011110,    // d
  0b01111001,    // E
  0b01110001     // F
  };

static const char* TAG = "esp-idf-tm1637";

// void delay(int microsec);
// void start(tm1637pins_t pins);
// void ack(tm1637pins_t pins);
// void stop(tm1637pins_t pins);
// void wrByte(tm1637pins_t pins, uint8_t data);
// void SmgDisplay(tm1637pins_t pins);


// void delay(int µs) {
//     ets_delay_us(µs);
// }

void bitDelay() {
    ets_delay_us(DEFAULT_BIT_DELAY);
}

void tmInit(tm1637pins_t pins) {
    ESP_LOGD(TAG, "Setting Pin %i as CLK\tSetting Pin %i as DIO", pins.clock, pins.data);
    gpio_config_t pinSet = {
        .pin_bit_mask = (1ULL<<pins.clock | 1ULL<<pins.data),
        .mode = GPIO_MODE_OUTPUT,
        .pull_down_en = GPIO_PULLDOWN_ENABLE
    };
    gpio_config(&pinSet);

    // gpio_set_direction(pins.clock, GPIO_MODE_OUTPUT);
    // gpio_set_direction(pins.data, GPIO_MODE_OUTPUT);
#ifdef DEBUG
    gpio_set_direction(DEBUG_START, GPIO_MODE_OUTPUT);
    gpio_set_direction(DEBUG_ACK, GPIO_MODE_OUTPUT);
    gpio_set_direction(DEBUG_STOP, GPIO_MODE_OUTPUT);
    gpio_set_direction(DEBUG_WRITE, GPIO_MODE_OUTPUT);
    gpio_set_level(DEBUG_START, LOW);
    gpio_set_level(DEBUG_ACK, LOW);
    gpio_set_level(DEBUG_STOP, LOW);
    gpio_set_level(DEBUG_WRITE, LOW);

#endif
    gpio_set_level(pins.clock, HIGH);
    gpio_set_level(pins.data, HIGH);
    
}


uint8_t setBrightness(uint8_t brightness, bool on) {
	uint8_t m_brightness = (brightness & 0x7) | (on? 0x08 : 0x00);
    return m_brightness;
}



void start(tm1637pins_t pins) {
#ifdef DEBUG
    gpio_set_level(DEBUG_START, HIGH);
#endif

  gpio_set_level(pins.data, 1);
  bitDelay();
  gpio_set_level(pins.data, 0);
  bitDelay();
  gpio_set_level(pins.data, 1);
  bitDelay();
#ifdef DEBUG
    gpio_set_level(DEBUG_START, LOW);
#endif
}

// void ack(tm1637pins_t pins) {
// #ifdef DEBUG
//     gpio_set_level(DEBUG_ACK, HIGH);
// #endif

//     gpio_set_level(pins.clock, LOW);
//     // delay(DELAY);
//     gpio_set_direction(pins.data, GPIO_MODE_INPUT);
//     delay(DELAY_C);
//     int ACK = gpio_get_level(pins.data);
//     // while(gpio_get_level(pins.data) == 1) {
//         gpio_set_level(pins.clock, HIGH);
//         delay(DELAY_A);
//         gpio_set_level(pins.clock, LOW);
//     // }

//     gpio_set_direction(pins.data, GPIO_MODE_OUTPUT);
// #ifdef DEBUG
//     gpio_set_level(DEBUG_ACK, LOW);
// #endif

// }

void stop(tm1637pins_t pins) {
#ifdef DEBUG
    gpio_set_level(DEBUG_STOP, HIGH);
#endif

	gpio_set_level(pins.data, 0);
	bitDelay();
	gpio_set_level(pins.clock, 1);
	bitDelay();
    gpio_set_level(pins.data, 1);
	bitDelay();
#ifdef DEBUG
    gpio_set_level(DEBUG_STOP, LOW);
#endif

}

uint8_t wrByte(tm1637pins_t pins, uint8_t datax) {
#ifdef DEBUG
    gpio_set_level(DEBUG_WRITE, HIGH);
#endif

    uint8_t data = datax;

    // 8 Data Bits
    for(uint8_t i = 0; i < 8; i++) {
        // CLK low
        gpio_set_level(pins.clock, 0);
        bitDelay();

        // Set data bit
        if (data & 0x01)
            gpio_set_level(pins.data, 1);
        else
            gpio_set_level(pins.data, 0);

        bitDelay();

        // CLK high
        gpio_set_level(pins.clock, 1);
        bitDelay();
        data = data >> 1;
    }

    // Wait for acknowledge
    // CLK to zero
    gpio_set_level(pins.clock, 0);
    // gpio_set_level(pins.data, 1);
    bitDelay();

    // CLK to high
    
    gpio_set_direction(pins.clock, GPIO_MODE_INPUT);
    bitDelay();
    uint8_t ack = gpio_get_level(pins.data);
    if (ack == 0) {
        gpio_set_direction(pins.clock, GPIO_MODE_OUTPUT);
    }
    
    gpio_set_level(pins.data, 0);


    bitDelay();
    gpio_set_level(pins.clock, 0);
    bitDelay();

    return ack;    

#ifdef DEBUG
    gpio_set_level(DEBUG_WRITE, LOW);
#endif

}

void showDots(uint8_t dots, uint8_t* digits)
{
    for(int i = 0; i < 4; ++i)
    {
        digits[i] |= (dots & 0x80);
        dots <<= 1;
    }
}

uint8_t encodeDigit(uint8_t digit)
{
	return digitToSegment[digit & 0x0f];
}